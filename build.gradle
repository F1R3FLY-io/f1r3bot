plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
}

def protobufVersion = '3.25.2'

group = 'io.f1r3fly'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'net.dv8tion:JDA:5.0.0-alpha.16'
    implementation 'com.neovisionaries:nv-websocket-client:2.14'
    implementation 'org.springframework.boot:spring-boot-starter:3.1.2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.1.2'

    // for deployer logic
    implementation 'com.google.protobuf:protobuf-java:3.25.2'
    implementation 'io.grpc:grpc-all:1.61.0'
    implementation 'com.rfksystems:blake2b:2.0.0'
    implementation 'fr.acinq.secp256k1:secp256k1-kmp:0.13.0'
    implementation 'fr.acinq.secp256k1:secp256k1-kmp-jni-jvm:0.13.0'
    implementation 'io.smallrye.reactive:mutiny:2.5.6'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'org.slf4j:slf4j-api:1.7.30'

    // neeeded for .proto files
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

test {
    useJUnitPlatform()
}

application {
    mainClassName = 'io.f1r3fly.Main'
}

jar {
    manifest {
        attributes(
                'Main-Class': 'org.f1r3fly.Main'
        )
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    // without this, the jar will contain the .SF, .DSA, .RSA files and as a result Docker and java -jar runners can't find Main class.
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

shadowJar {
    mergeServiceFiles {
        include 'META-INF/services/io.grpc.LoadBalancerProvider'
        include 'META-INF/services/com.google.common.util.concurrent.ListenableFuture'
    }
    archiveClassifier = 'all'
    manifest {
        attributes 'Main-Class': 'io.f1r3fly.Main'
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

task buildDockerImage(type: Exec) {
    dependsOn shadowJar
    commandLine 'docker', 'build', '-t', 'f1r3fly-discord-bot:latest', '.'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.61.0'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main {
        proto {
            srcDir '../f1r3fly/node/target/protobuf_external'
            srcDir '../f1r3fly/models/src/main/protobuf'
            srcDir '../f1r3fly/node/target/protobuf_external/scalapb'
            srcDir '../f1r3fly/node/src/main/protobuf'
        }
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

compileJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

//tasks.withType(JavaExec).configureEach {
//    classpath = sourceSets.main.runtimeClasspath
//}
//
//build.dependsOn shadowJar
